<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 引入jdbc -->
    <context:property-placeholder location="classpath:/config/jdbc/druid.properties"/>

    <!-- Druid数据源配置 (master数据源,负责write) -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${datasource.masterUrl}"/>
        <property name="username" value="${datasource.username}"/>
        <property name="password" value="${datasource.password}"/>
        <property name="filters" value="${druid.filters}"/>
        <!-- 数据源需要数据库密码进行解密 -->
        <property name="connectionProperties" value="${druid.connectProperties}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 testWhileIdle的判断依据 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 设置5分钟 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery 为 null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 连接泄漏监测(忘记close) 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开 -->
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        <!-- 关闭abandoned连接时输出错误日志 -->
        <property name="logAbandoned" value="${druid.logAbandoned}"/>
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
                <ref bean="wall-filter"/>
            </list>
        </property>
    </bean>

    <!-- 监控拦截器 -->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢,并且通过日志输出执行慢的SQL，配置是5秒 -->
        <property name="slowSqlMillis" value="${druid.slowSqlMillis}"/>
        <property name="logSlowSql" value="${druid.logSlowSql}"/>
        <!-- 日志Sql合并配置 -->
        <property name="mergeSql" value="${druid.mergeSql}"/>
    </bean>

    <!-- 配置防御SQL注入攻击 -->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <!-- 数据库类型 -->
        <property name="dbType" value="${druid.dbType}"/>
        <!-- 配置防御SQL注入攻击,采用默认配置 -->
        <!-- <property name="dir" value="META-INF/druid/wall/mysql"></property> -->
    </bean>

    <!-- 配置myBatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:/org/zhenchao/passport/oauth/mapper/*.xml"/>
    </bean>

    <!-- myBatis mapper配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--自动扫描注入-->
        <property name="basePackage" value="org.zhenchao.passport.oauth.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

</beans>